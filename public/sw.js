// Service Worker for CRM Wash POS System with optimized caching
const CACHE_NAME = 'crm-wash-pos-v1.5.0';
const API_CACHE_NAME = 'crm-wash-api-v1.5.0';
const STATIC_CACHE_NAME = 'crm-wash-static-v1.5.0';
const OFFLINE_URL = '/offline';

// Essential files to cache for offline functionality
const ESSENTIAL_CACHE = [
  '/',
  '/pos',
  '/dashboard',
  '/manifest.json',
  '/offline',
  // Add your main CSS and JS bundles here
  // These will be generated by Next.js build process
];

// API endpoints that should be cached with specific strategies
const API_CACHE_PATTERNS = [
  '/api/services',
  '/api/customers',
  '/api/transactions'
];

// Install event - cache essential resources
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');

  event.waitUntil(
    (async () => {
      // Create multiple caches
      const staticCache = await caches.open(STATIC_CACHE_NAME);
      const apiCache = await caches.open(API_CACHE_NAME);

      try {
        // Cache essential files
        await staticCache.addAll(ESSENTIAL_CACHE);
        console.log('Essential files cached successfully');
      } catch (error) {
        console.error('Failed to cache essential files:', error);
        // Cache files individually to avoid failing on missing files
        for (const url of ESSENTIAL_CACHE) {
          try {
            await staticCache.add(url);
          } catch (err) {
            console.warn(`Failed to cache ${url}:`, err);
          }
        }
      }

      // Skip waiting to activate immediately
      self.skipWaiting();
    })()
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');

  event.waitUntil(
    (async () => {
      // Clean up old caches
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames
          .filter(cacheName =>
            cacheName !== STATIC_CACHE_NAME &&
            cacheName !== API_CACHE_NAME &&
            cacheName !== CACHE_NAME
          )
          .map(cacheName => caches.delete(cacheName))
      );

      // Take control of all pages
      await self.clients.claim();
      console.log('Service Worker activated');
    })()
  );
});

// Optimized fetch handler with multiple caching strategies
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Skip non-GET requests
  if (request.method !== 'GET') {
    return;
  }

  // Skip external requests
  if (url.origin !== self.location.origin) {
    return;
  }

  // Handle /api/services with cache-first strategy for speed
  if (url.pathname === '/api/services') {
    event.respondWith(handleServicesRequest(request));
  }
  // Handle other API requests with network-first strategy
  else if (url.pathname.startsWith('/api/')) {
    event.respondWith(handleApiRequest(request));
  }
  // Handle Next.js assets with cache-first
  else if (url.pathname.startsWith('/_next/')) {
    event.respondWith(handleAssetRequest(request));
  }
  // Handle page navigation
  else {
    // Pages - Network First with offline fallback
    event.respondWith(handlePageRequest(request));
  }
});

// Handle API requests with network-first strategy  
async function handleApiRequest(request) {
  const apiCache = await caches.open(API_CACHE_NAME);

  try {
    // Try network first
    const networkResponse = await fetch(request);

    // Cache successful responses
    if (networkResponse.ok) {
      const responseClone = networkResponse.clone();
      const responseBody = await responseClone.text();

      const responseWithTime = new Response(responseBody, {
        status: networkResponse.status,
        statusText: networkResponse.statusText,
        headers: {
          ...Object.fromEntries(networkResponse.headers.entries()),
          'sw-cache-time': Date.now().toString()
        }
      });

      apiCache.put(request, responseWithTime);
    }

    return networkResponse;
  } catch (error) {
    console.log('Network failed for API request, trying cache:', request.url);

    // Fallback to cache
    const cachedResponse = await apiCache.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    // Return offline response for API requests
    return new Response(
      JSON.stringify({
        error: 'Offline - cached data not available',
        message: 'Please check your internet connection',
        offline: true
      }),
      {
        status: 503,
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        }
      }
    );
  }
}

// Handle asset requests with cache-first strategy
async function handleAssetRequest(request) {
  const staticCache = await caches.open(STATIC_CACHE_NAME);

  // Try cache first
  const cachedResponse = await staticCache.match(request);
  if (cachedResponse) {
    return cachedResponse;
  }

  // Fallback to network
  try {
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      staticCache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Failed to fetch asset:', request.url);
    return new Response('Asset not available offline', { status: 503 });
  }
}

// Handle page requests with network-first strategy
async function handlePageRequest(request) {
  const staticCache = await caches.open(STATIC_CACHE_NAME);

  try {
    // Try network first
    const networkResponse = await fetch(request);

    // Cache successful responses
    if (networkResponse.ok) {
      staticCache.put(request, networkResponse.clone());
    }

    return networkResponse;
  } catch (error) {
    console.log('Network failed for page request, trying cache:', request.url);

    // Try to serve from cache
    const cachedResponse = await staticCache.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }

    // Fallback to offline page for navigation requests
    if (request.mode === 'navigate') {
      const offlineResponse = await staticCache.match(OFFLINE_URL);
      if (offlineResponse) {
        return offlineResponse;
      }
    }

    throw error;
  }
}

// Optimized handler for /api/services - cache-first for speed
async function handleServicesRequest(request) {
  const apiCache = await caches.open(API_CACHE_NAME);

  try {
    // Try cache first for instant loading
    const cachedResponse = await apiCache.match(request);

    if (cachedResponse) {
      // Check cache age
      const cacheDate = cachedResponse.headers.get('sw-cache-time');
      const now = Date.now();
      const cacheAge = cacheDate ? now - parseInt(cacheDate) : Infinity;

      // If cache is less than 5 minutes old, return immediately
      if (cacheAge < 5 * 60 * 1000) {
        console.log('Serving services from fresh cache');
        return cachedResponse;
      }

      // Cache is stale, update in background but return cached version
      console.log('Serving services from stale cache, updating in background');

      // Background update (don't await)
      fetch(request).then(async (networkResponse) => {
        if (networkResponse.ok) {
          const responseClone = networkResponse.clone();
          const responseBody = await responseClone.text();

          const responseWithTime = new Response(responseBody, {
            status: networkResponse.status,
            statusText: networkResponse.statusText,
            headers: {
              ...Object.fromEntries(networkResponse.headers.entries()),
              'sw-cache-time': Date.now().toString()
            }
          });

          apiCache.put(request, responseWithTime);
          console.log('Background update completed for services');
        }
      }).catch(error => {
        console.warn('Background update failed:', error);
      });

      return cachedResponse;
    }

    // No cache available, fetch from network
    console.log('No cache available, fetching services from network');
    const networkResponse = await fetch(request);

    if (networkResponse.ok) {
      const responseClone = networkResponse.clone();
      const responseBody = await responseClone.text();

      const responseWithTime = new Response(responseBody, {
        status: networkResponse.status,
        statusText: networkResponse.statusText,
        headers: {
          ...Object.fromEntries(networkResponse.headers.entries()),
          'sw-cache-time': Date.now().toString()
        }
      });

      apiCache.put(request, responseWithTime);
      console.log('Services fetched and cached from network');
    }

    return networkResponse;
  } catch (error) {
    console.log('Network failed for services, trying any cached version:', error);

    // Network failed, try to return any cached version (even if stale)
    const cachedResponse = await apiCache.match(request);
    if (cachedResponse) {
      console.log('Returning stale cached services due to network failure');
      return cachedResponse;
    }

    // No cache available, return empty services response
    return new Response(
      JSON.stringify({
        statusCode: 200,
        data: [],
        message: 'Offline - no services available',
        offline: true
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          'sw-cache-time': Date.now().toString()
        }
      }
    );
  }
}

// Handle background sync for offline transactions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync-transactions') {
    console.log('Background sync triggered for transactions');
    event.waitUntil(syncOfflineTransactions());
  }
});

// Sync offline transactions when connection is restored
async function syncOfflineTransactions() {
  try {
    // Get offline transactions from IndexedDB or localStorage
    const offlineTransactions = await getOfflineTransactions();

    for (const transaction of offlineTransactions) {
      try {
        const response = await fetch('/api/transactions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(transaction)
        });

        if (response.ok) {
          await removeOfflineTransaction(transaction.id);
          console.log('Synced offline transaction:', transaction.id);
        }
      } catch (error) {
        console.error('Failed to sync transaction:', transaction.id, error);
      }
    }
  } catch (error) {
    console.error('Background sync failed:', error);
  }
}

// Placeholder functions for offline storage
async function getOfflineTransactions() {
  // Implement IndexedDB or localStorage retrieval
  return [];
}

async function removeOfflineTransaction(transactionId) {
  // Implement removal from offline storage
  console.log('Removing offline transaction:', transactionId);
}

// Handle push notifications (for order updates)
self.addEventListener('push', (event) => {
  if (!event.data) return;

  const data = event.data.json();
  const options = {
    body: data.body || 'New notification from CRM Wash',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/badge-72x72.png',
    vibrate: [200, 100, 200],
    data: data.data || {},
    actions: [
      {
        action: 'view',
        title: 'View',
        icon: '/icons/action-view.png'
      },
      {
        action: 'dismiss',
        title: 'Dismiss',
        icon: '/icons/action-dismiss.png'
      }
    ]
  };

  event.waitUntil(
    self.registration.showNotification(data.title || 'CRM Wash', options)
  );
});

// Handle notification clicks
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action === 'view') {
    event.waitUntil(
      clients.openWindow('/pos?notification=' + event.notification.data?.id)
    );
  }
});

// Message handler for communication with clients
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }

  if (event.data && event.data.type === 'CLEAR_CACHE') {
    event.waitUntil(
      Promise.all([
        caches.delete(API_CACHE_NAME),
        caches.delete(STATIC_CACHE_NAME)
      ]).then(() => {
        if (event.ports && event.ports[0]) {
          event.ports[0].postMessage({
            type: 'CACHE_CLEARED',
            message: 'All caches cleared'
          });
        }
      })
    );
  }

  if (event.data && event.data.type === 'PRELOAD_SERVICES') {
    event.waitUntil(
      handleServicesRequest(new Request('/api/services'))
        .then(() => {
          if (event.ports && event.ports[0]) {
            event.ports[0].postMessage({
              type: 'SERVICES_PRELOADED',
              message: 'Services preloaded successfully'
            });
          }
        })
        .catch((error) => {
          if (event.ports && event.ports[0]) {
            event.ports[0].postMessage({
              type: 'PRELOAD_FAILED',
              message: 'Failed to preload services',
              error: error.message
            });
          }
        })
    );
  }

  if (event.data && event.data.type === 'REFRESH_SERVICES') {
    event.waitUntil(
      // Clear services cache and fetch fresh
      caches.open(API_CACHE_NAME)
        .then(cache => cache.delete('/api/services'))
        .then(() => handleServicesRequest(new Request('/api/services')))
        .then(() => {
          // Notify all clients about refresh
          self.clients.matchAll().then(clients => {
            clients.forEach(client => {
              client.postMessage({
                type: 'SERVICES_REFRESHED',
                message: 'Services refreshed from network'
              });
            });
          });
        })
        .catch(error => {
          console.error('Failed to refresh services:', error);
        })
    );
  }
});

// Handle sync event for background refresh
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // Clear old cache and fetch fresh data
      caches.delete(API_CACHE_NAME)
        .then(() => caches.open(API_CACHE_NAME))
        .then(() => handleServicesRequest(new Request('/api/services')))
        .then(() => {
          // Notify clients that sync completed
          self.clients.matchAll().then(clients => {
            clients.forEach(client => {
              client.postMessage({
                type: 'SYNC_COMPLETED',
                message: 'Background sync completed'
              });
            });
          });
        })
        .catch(error => {
          console.error('Background sync failed:', error);
        })
    );
  }
});
